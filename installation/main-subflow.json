{
   "id":"global",
   "configs":[
      
   ],
   "subflows":[
   {
        "id": "df0111361dbaa82d",
        "type": "subflow",
        "name": "Init node",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 560,
                "y": 100,
                "wires": [
                    {
                        "id": "f752c203416cb91d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Global settings",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "platform",
                "type": "str",
                "value": "localhost:1880/platform",
                "ui": {
                    "label": {
                        "en-US": "Platform server"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f752c203416cb91d",
        "type": "function",
        "z": "df0111361dbaa82d",
        "name": "",
        "func": "var platformUrl = env.get(\"platform\");\nvar templateHeader;\nvar nodeOrder = 0;\nvar hostArray = [];\nvar appArray = [];\n\ntemplateHeader = {\n  \"tosca_definitions_version\": \"tosca_simple_yaml_1_2\",\n  \"description\": \"Application model of ORBK Use Case\",\n  \"imports\": [\n    \"definitions/custom_types.yaml\"\n  ],\n  \"topology_template\": {\n    \"node_templates\": {\n    }\n  }\n};\nmsg.payload = templateHeader;\nmsg.url = platformUrl;\nmsg.nodeorder = nodeOrder;\nmsg.hostarray = hostArray;\nmsg.apparray = appArray;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "4724c530ece3f15d"
            ]
        ]
    },
    {
        "id": "1b59566d3663b7b4",
        "type": "inject",
        "z": "df0111361dbaa82d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "f752c203416cb91d"
            ]
        ]
    },
    {
        "id": "4724c530ece3f15d",
        "type": "debug",
        "z": "df0111361dbaa82d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 180,
        "wires": []
    },
	{
        "id": "3e991c1d8aecc74d",
        "type": "subflow",
        "name": "Main node",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 420,
                "y": 100,
                "wires": [
                    {
                        "id": "2a2eae9c983934da"
                    },
                    {
                        "id": "7a2971c717c0d64d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 100,
                "wires": [
                    {
                        "id": "2a2eae9c983934da",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "name",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Name"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Resources"
                    },
                    "type": "none"
                }
            },
            {
                "name": "cores",
                "type": "num",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Cores"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "ram",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Ram"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "hdd",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Disk space"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Settings"
                    },
                    "type": "none"
                }
            },
            {
                "name": "image",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Image"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "namespace",
                "type": "str",
                "value": "default",
                "ui": {
                    "label": {
                        "en-US": "Namespace"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "type",
                "type": "str",
                "value": "producer",
                "ui": {
                    "label": {
                        "en-US": "Type"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Producer"
                                },
                                "v": "producer"
                            },
                            {
                                "l": {
                                    "en-US": "Subscriber"
                                },
                                "v": "subscriber"
                            }
                        ]
                    }
                }
            },
            {
                "name": "qlength",
                "type": "num",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Queue length"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "qscale",
                "type": "num",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Scale (Queue)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "mrate",
                "type": "num",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Message rate"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "rscale",
                "type": "num",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Scale (Rate)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2a2eae9c983934da",
        "type": "function",
        "z": "3e991c1d8aecc74d",
        "name": "",
        "func": "var nodeName = env.get(\"name\");\nvar hostName = nodeName+'-host';\nvar appName = nodeName+'-app';\nvar podName = nodeName+'-pod';\n\nvar cores = env.get(\"cores\");\nvar ram = env.get(\"ram\");\nvar hdd = env.get(\"hdd\");\n\nvar image = env.get(\"image\");\nvar namespace = env.get(\"namespace\");\nvar type = env.get(\"type\");\nvar qlength = env.get(\"qlength\");\nvar qscale = env.get(\"qscale\");\nvar mrate = env.get(\"mrate\");\nvar rscale = env.get(\"rscale\");\n\nvar nodeOrder = ++msg.nodeorder;\nmsg.nodeorder = nodeOrder;\n\nvar inputQueue = namespace+'/'+nodeOrder;\nvar outputQueue = namespace+'/'+(++nodeOrder);\n\nvar hostArray = msg.hostarray;\nvar appArray = msg.apparray;\n\nvar hostTemplate = {\n        \"type\": \"tosca.nodes.Compute\",\n        \"capabilities\": {\n          \"host\": {\n            \"properties\": {\n              \"num_cpus\": cores,\n              \"mem_size\": ram,\n              \"disk_size\": hdd\n            }\n          },\n          \"os\": {\n            \"properties\": {\n              \"architecture\": \"x86_64\",\n              \"type\": \"linux\"\n            }\n          }\n        }\n      };\n      \nvar appTemplate = {\n        \"type\": \"Operator\",\n        \"properties\": {\n          \"image\": image,\n          \"name\": podName,\n          \"application\": namespace,\n          \"operator_type\": type,\n          \"order\": nodeOrder,\n          \"queues\": {\n            \"properties\": {\n              \"input_queue\": inputQueue,\n              \"output_queue\": outputQueue,\n            }\n          },\n          \"scale\": [],\n          \"port\": [\n            20766\n          ]\n        },\n        \"requirements\": [\n          {\n            \"host\": hostName\n          }\n        ]\n      };\n\nvar scaleCounter = 0;\nnode.warn(scaleCounter);\nif ((qlength > 0) && (qscale > 0)) {\n    appTemplate.properties.scale[scaleCounter] = {\n              \"rule\": scaleCounter+1,\n              \"condition\": \"QueueLength > \"+qlength,\n              \"input_queue\": inputQueue,\n              \"scale\": qscale\n            }\n    scaleCounter++;\n}\nnode.warn(scaleCounter);\nif ((mrate > 0) && (rscale > 0)) {\n    appTemplate.properties.scale[scaleCounter] = {\n              \"rule\": scaleCounter+1,\n              \"condition\": \"MessageRate > \"+mrate,\n              \"input_queue\": inputQueue,\n              \"scale\": rscale\n            }\n    scaleCounter++;\n}\nnode.warn(scaleCounter);\n//msg.payload.topology_template.node_templates[hostName]=hostTemplate;\n//msg.payload.topology_template.node_templates[appName]=appTemplate;\nhostArray.push([hostName,hostTemplate]);\nappArray.push([appName,appTemplate]);\nmsg.hostarray = hostArray;\nmsg.apparray = appArray;\nif (appTemplate.properties.scale.length > 0) {\n    node.warn(\"Sending template to next node!\");\n    return msg;   \n} else {\n    node.warn(\"Please check again, Queue length, Queue scale, Message rate, Rate scale! Halting execution!\")\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 100,
        "wires": [
            [
                "73308f822e1c15a3"
            ]
        ]
    },
    {
        "id": "73308f822e1c15a3",
        "type": "debug",
        "z": "3e991c1d8aecc74d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 260,
        "wires": []
    },
    {
        "id": "7a2971c717c0d64d",
        "type": "debug",
        "z": "3e991c1d8aecc74d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 260,
        "wires": []
    },
	{
        "id": "5ab7469e11752770",
        "type": "subflow",
        "name": "Final node",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "3c47b82b691621f0"
                    },
                    {
                        "id": "47b6817e47cc2ba6"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f5fc8f0c4098edb4",
        "type": "http request",
        "z": "5ab7469e11752770",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 450,
        "y": 80,
        "wires": [
            [
                "c36d87f9022d07a3"
            ]
        ]
    },
    {
        "id": "c36d87f9022d07a3",
        "type": "debug",
        "z": "5ab7469e11752770",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 80,
        "wires": []
    },
    {
        "id": "3c47b82b691621f0",
        "type": "debug",
        "z": "5ab7469e11752770",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 200,
        "wires": []
    },
    {
        "id": "47b6817e47cc2ba6",
        "type": "function",
        "z": "5ab7469e11752770",
        "name": "",
        "func": "var hostArray = msg.hostarray;\nvar appArray = msg.apparray;\nfor (i = 0; i < hostArray.length; i++) {\n  msg.payload.topology_template.node_templates[hostArray[i][0]]=hostArray[i][1];\n} \nfor (i = 0; i < hostArray.length; i++) {\n  msg.payload.topology_template.node_templates[appArray[i][0]]=appArray[i][1];\n}\ndelete msg.hostarray;\ndelete msg.apparray;\ndelete msg.nodeorder;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            [
                "f5fc8f0c4098edb4",
                "177d7b5f942691ed"
            ]
        ]
    },
    {
        "id": "177d7b5f942691ed",
        "type": "debug",
        "z": "5ab7469e11752770",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 200,
        "wires": []
    }
   ]
}